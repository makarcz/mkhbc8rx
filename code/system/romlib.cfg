#
# File: 	romlib.cfg
# Purpose: 	CC65 configuration for mkhbcrom.lib.
# Author:	Marek Karcz 2018.
#
# Feb 21 2018:
#	Created.
#
# Feb 22 2018:
#   Removed fake memory segment ROM3.
#   Adjusted size of MOS and start / size of ROM1 and ROM2 accordingly and
#   for added functions in firmware.
#
# 2/23/2018
#   Adjusted ROM1/ROM2 sizes to get space for changes to romlib.
#
# 2/24/2018
#   Added IOn memory sections and LIBARG section for ROMLIB arguments area.
#
# 2/27/2018
#   Change size of ZP segment to 1/2 of $80 (OS PromptLine register) - $26.
#   The other half of remaining ZP space will be used by MKHBCOS library:
#   start = $53, size = $2D
#   NOTE: The romlib.BIN must be re-generated after this change and new EPROM
#         burned.
#

MEMORY {
    ZP:     start = $26,     size = $2D,     type = rw,    define = yes;
    IO0:    start = $C000,   size = $100,    type = rw,    define = yes;
    IO1:    start = $C100,   size = $100,    type = rw,    define = yes;
    IO2:    start = $C200,   size = $100,    type = rw,    define = yes;
    IO3:    start = $C300,   size = $100,    type = rw,    define = yes;
    IO4:    start = $C400,   size = $100,    type = rw,    define = yes;
    IO5:    start = $C500,   size = $100,    type = rw,    define = yes;
    IO6:    start = $C600,   size = $100,    type = rw,    define = yes;
    IO7:    start = $C700,   size = $100,    type = rw,    define = yes;
    MOS:    start = $E000,   size = $0D80,   fill = yes,   type   = ro;
    ROM1:   start = $ED80,   size = $0F44,   fill = yes;
    ROM2:   start = $FCC4,   size = $02F9,   fill = yes;
    ROM21:  start = $FFBD,   size = $3D,     fill = yes;
    ROM22:  start = $FFFA,   size = $06,     fill = yes;
    RAM:    start = $0400,   size = $0400,   type = rw,    define = yes;
    LIBARG: start = $0A00,   size = $100,    type = rw,    define = yes;
}

SEGMENTS {
    ZEROPAGE:  load = ZP,    type = zp,  define   = yes;
    DATA:      load = ROM1,  type = rw,  define   = yes, run = RAM;
    BSS:       load = RAM,   type = bss, define   = yes;
    HEAP:      load = RAM,   type = bss, optional = yes;
    STARTUP:   load = MOS,   type = ro;
    INIT:      load = ROM1,  type = ro,  optional = yes;
    CODE:      load = ROM1,  type = ro;
    RODATA:    load = ROM2,  type = ro;
    KERN:      load = ROM21, type = ro;
    VECTORS:   load = ROM22, type = ro;
}

FEATURES {
    CONDES:    segment = STARTUP,
               type    = constructor,
               label   = __CONSTRUCTOR_TABLE__,
               count   = __CONSTRUCTOR_COUNT__;
    CONDES:    segment = STARTUP,
               type    = destructor,
               label   = __DESTRUCTOR_TABLE__,
               count   = __DESTRUCTOR_COUNT__;
}

SYMBOLS {
    # Define the stack size for the application
    __STACKSIZE__:  value = $0200, weak = yes;
}
