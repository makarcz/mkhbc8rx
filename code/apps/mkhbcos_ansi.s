;
; File generated by cc65 v 2.13.2
;
	.fopt		compiler,"cc65 v 2.13.2"
	.setcpu		"6502"
	.smart		on
	.autoimport	on
	.case		on
	.debuginfo	off
	.importzp	sp, sreg, regsave, regbank, tmp1, ptr1, ptr2
	.macpack	longbranch
	.import		_itoa
	.import		_memset
	.import		_puts
	.export		_ansi_resetallattr
	.export		_ansi_scrolldown
	.export		_ansi_cls
	.export		_ansi_crsr_home
	.export		_ansi_blinkon
	.export		_ansi_set_cursor
	.export		_ansi_set_colors
	.export		_ansi_boldon
	.export		_ansi_reverseon
	.export		_ansicode_scrldown
	.export		_ansicode_cls
	.export		_ansicode_blink
	.export		_ansicode_reset
	.export		_ansicode_esc1
	.export		_ansicode_bold
	.export		_ansicode_reverse
	.export		_ansicode_home
	.export		_termbuf

.segment	"DATA"

_ansicode_scrldown:
	.byte	$1B
	.byte	$44
	.byte	$00
_ansicode_cls:
	.byte	$1B
	.byte	$5B
	.byte	$32
	.byte	$4A
	.byte	$00
_ansicode_home:
	.byte	$1B
	.byte	$5B
	.byte	$31
	.byte	$3B
	.byte	$31
	.byte	$48
	.byte	$00
_ansicode_blink:
	.byte	$1B
	.byte	$5B
	.byte	$35
	.byte	$6D
	.byte	$00
_ansicode_reset:
	.byte	$1B
	.byte	$5B
	.byte	$30
	.byte	$6D
	.byte	$00
_ansicode_esc1:
	.byte	$1B
	.byte	$5B
	.byte	$00
_ansicode_bold:
	.byte	$1B
	.byte	$5B
	.byte	$31
	.byte	$6D
	.byte	$00
_ansicode_reverse:
	.byte	$1B
	.byte	$5B
	.byte	$37
	.byte	$6D
	.byte	$00

.segment	"RODATA"

L0001:
	.byte	$3B,$00,$66,$00,$3B,$00,$6D,$00

.segment	"BSS"

_termbuf:
	.res	20,$00

; ---------------------------------------------------------------
; void __near__ ansi_resetallattr (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_ansi_resetallattr: near

.segment	"CODE"

	lda     #<(_ansicode_reset)
	ldx     #>(_ansicode_reset)
	jsr     _puts
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ ansi_scrolldown (int)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_ansi_scrolldown: near

.segment	"CODE"

	jsr     decsp2
	ldx     #$00
	lda     #$00
	ldy     #$00
	jsr     staxysp
L002E:	ldy     #$01
	jsr     ldaxysp
	jsr     pushax
	ldy     #$05
	jsr     ldaxysp
	jsr     tosltax
	jne     L0031
	jmp     L002F
L0031:	lda     #<(_ansicode_scrldown)
	ldx     #>(_ansicode_scrldown)
	jsr     _puts
	ldy     #$01
	jsr     ldaxysp
	sta     regsave
	stx     regsave+1
	jsr     incax1
	ldy     #$00
	jsr     staxysp
	lda     regsave
	ldx     regsave+1
	jmp     L002E
L002F:	jsr     incsp4
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ ansi_cls (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_ansi_cls: near

.segment	"CODE"

	lda     #<(_ansicode_cls)
	ldx     #>(_ansicode_cls)
	jsr     _puts
	lda     #<(_ansicode_home)
	ldx     #>(_ansicode_home)
	jsr     _puts
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ ansi_crsr_home (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_ansi_crsr_home: near

.segment	"CODE"

	lda     #<(_ansicode_home)
	ldx     #>(_ansicode_home)
	jsr     _puts
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ ansi_blinkon (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_ansi_blinkon: near

.segment	"CODE"

	lda     #<(_ansicode_blink)
	ldx     #>(_ansicode_blink)
	jsr     _puts
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ ansi_set_cursor (int, int)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_ansi_set_cursor: near

.segment	"CODE"

	ldy     #$13
	lda     #$00
L004E:	sta     _termbuf,y
	dey
	bpl     L004E
	lda     #<(_ansicode_esc1)
	ldx     #>(_ansicode_esc1)
	jsr     _puts
	ldy     #$01
	jsr     ldaxysp
	jsr     pushax
	lda     #<(_termbuf)
	ldx     #>(_termbuf)
	jsr     pushax
	ldx     #$00
	lda     #$0A
	jsr     _itoa
	jsr     _puts
	lda     #<(L0001)
	ldx     #>(L0001)
	jsr     _puts
	ldy     #$13
	lda     #$00
L005C:	sta     _termbuf,y
	dey
	bpl     L005C
	ldy     #$03
	jsr     ldaxysp
	jsr     pushax
	lda     #<(_termbuf)
	ldx     #>(_termbuf)
	jsr     pushax
	ldx     #$00
	lda     #$0A
	jsr     _itoa
	jsr     _puts
	lda     #<(L0001+2)
	ldx     #>(L0001+2)
	jsr     _puts
	jsr     incsp4
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ ansi_set_colors (int, int)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_ansi_set_colors: near

.segment	"CODE"

	ldx     #$00
	lda     #$00
	jsr     pushax
	ldx     #$00
	lda     #$02
	jsr     pushax
	ldy     #$13
	lda     #$00
L006B:	sta     _termbuf,y
	dey
	bpl     L006B
	lda     #<(_ansicode_esc1)
	ldx     #>(_ansicode_esc1)
	jsr     _puts
	ldy     #$07
	jsr     ldaxysp
	txa
	jsr     boolge
	jeq     L0070
	ldy     #$07
	jsr     ldaxysp
	cmp     #$08
	txa
	sbc     #$00
	bvc     L0071
	eor     #$80
L0071:	asl     a
	lda     #$00
	ldx     #$00
	rol     a
	jne     L006F
L0070:	ldx     #$00
	lda     #$00
	jeq     L0072
L006F:	ldx     #$00
	lda     #$01
L0072:	jeq     L006E
	ldy     #$07
	jsr     ldaxysp
	ldy     #$28
	jsr     incaxy
	ldy     #$02
	jsr     staxysp
L006E:	ldy     #$05
	jsr     ldaxysp
	txa
	jsr     boolge
	jeq     L0077
	ldy     #$05
	jsr     ldaxysp
	cmp     #$08
	txa
	sbc     #$00
	bvc     L0078
	eor     #$80
L0078:	asl     a
	lda     #$00
	ldx     #$00
	rol     a
	jne     L0076
L0077:	ldx     #$00
	lda     #$00
	jeq     L0079
L0076:	ldx     #$00
	lda     #$01
L0079:	jeq     L0075
	ldy     #$05
	jsr     ldaxysp
	ldy     #$1E
	jsr     incaxy
	ldy     #$00
	jsr     staxysp
L0075:	ldy     #$03
	jsr     ldaxysp
	jsr     pushax
	lda     #<(_termbuf)
	ldx     #>(_termbuf)
	jsr     pushax
	ldx     #$00
	lda     #$0A
	jsr     _itoa
	jsr     _puts
	lda     #<(L0001+4)
	ldx     #>(L0001+4)
	jsr     _puts
	ldy     #$13
	lda     #$00
L0087:	sta     _termbuf,y
	dey
	bpl     L0087
	ldy     #$01
	jsr     ldaxysp
	jsr     pushax
	lda     #<(_termbuf)
	ldx     #>(_termbuf)
	jsr     pushax
	ldx     #$00
	lda     #$0A
	jsr     _itoa
	jsr     _puts
	lda     #<(L0001+6)
	ldx     #>(L0001+6)
	jsr     _puts
	jsr     incsp8
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ ansi_boldon (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_ansi_boldon: near

.segment	"CODE"

	lda     #<(_ansicode_bold)
	ldx     #>(_ansicode_bold)
	jsr     _puts
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ ansi_reverseon (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_ansi_reverseon: near

.segment	"CODE"

	lda     #<(_ansicode_reverse)
	ldx     #>(_ansicode_reverse)
	jsr     _puts
	rts

.endproc

