#
# File: 	himem.cfg
# Purpose: 	CC65 configuration for applications using mkhbcos.lib, but loading
#           to upper memory and with small footprint.
# Author:	Marek Karcz 2018.
#
#

MEMORY {
    ZP:     start = $53,     size = $2D,     type    = rw, define = yes;
    RAMC:   start = $5900,   size = $0530,   fill    = yes;
    RAMD:   start = $5E30,   size = $0180,   fill    = yes;
    RAM:    start = $5FB0,   size = $004E,   define  = yes, fill = yes;
    BRAM:   start = $8000,   size = $4000,   define  = yes;
    IO0:    start = $C000,   size = $100,    type = rw,    define = yes;
    IO1:    start = $C100,   size = $100,    type = rw,    define = yes;
    IO2:    start = $C200,   size = $100,    type = rw,    define = yes;
    IO3:    start = $C300,   size = $100,    type = rw,    define = yes;
    IO4:    start = $C400,   size = $100,    type = rw,    define = yes;
    IO5:    start = $C500,   size = $100,    type = rw,    define = yes;
    IO6:    start = $C600,   size = $100,    type = rw,    define = yes;
    IO7:    start = $C700,   size = $100,    type = rw,    define = yes;
    ROMLIB: start = $E000,   size = $2000,   type = ro,    define  = yes;
    LIBARG: start = $0A00,   size = $100,    type = rw,    define  = yes;
}

SEGMENTS {
    ZEROPAGE:  load = ZP,    type = zp,  define   = yes;
    DATA:      load = RAM,   type = rw,  define   = yes;
    BSS:       load = RAM,   type = bss, define   = yes;
    HEAP:      load = RAM,   type = bss, optional = yes;
    STARTUP:   load = RAMC,  type = ro;
    INIT:      load = RAMC,  type = ro,  optional = yes;
    CODE:      load = RAMC,  type = ro;
    RODATA:    load = RAMD,  type = ro;
}

FEATURES {
    CONDES:    segment = STARTUP,
               type    = constructor,
               label   = __CONSTRUCTOR_TABLE__,
               count   = __CONSTRUCTOR_COUNT__;
    CONDES:    segment = STARTUP,
               type    = destructor,
               label   = __DESTRUCTOR_TABLE__,
               count   = __DESTRUCTOR_COUNT__;
}

SYMBOLS {
    # Define the stack size for the application
    __STACKSIZE__:  value = $0200, weak = yes;
}
